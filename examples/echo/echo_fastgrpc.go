// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: echo.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	google_golang_org_grpc "google.golang.org/grpc"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ google_golang_org_grpc.ClientConn
var _ sync.Pool

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = google_golang_org_grpc.SupportPackageIsVersion4

type _Echo_Echo_Pool_Struct struct {
	in EchoRequest
	// out EchoResponse
}

var _Echo_Echo_Pool = sync.Pool{
	New: func() interface{} {
		return new(_Echo_Echo_Pool_Struct)
	},
}

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...google_golang_org_grpc.CallOption) (*EchoResponse, error)
}

type echoClient struct {
	cc *google_golang_org_grpc.ClientConn
}

func NewEchoClient(cc *google_golang_org_grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoRequest, opts ...google_golang_org_grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/Echo/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
}

func RegisterEchoServer(s *google_golang_org_grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor google_golang_org_grpc.UnaryServerInterceptor) (interface{}, error) {
	d := _Echo_Echo_Pool.Get().(*_Echo_Echo_Pool_Struct)
	defer _Echo_Echo_Pool.Put(d)
	in := &d.in
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &google_golang_org_grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = google_golang_org_grpc.ServiceDesc{
	ServiceName: "Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []google_golang_org_grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
	},
	Streams:  []google_golang_org_grpc.StreamDesc{},
	Metadata: "echo.proto",
}
